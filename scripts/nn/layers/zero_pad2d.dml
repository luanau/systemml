#-------------------------------------------------------------
#
# Licensed to the Apache Software Foundation (ASF) under one
# or more contributor license agreements.  See the NOTICE file
# distributed with this work for additional information
# regarding copyright ownership.  The ASF licenses this file
# to you under the Apache License, Version 2.0 (the
# "License"); you may not use this file except in compliance
# with the License.  You may obtain a copy of the License at
#
#   http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing,
# software distributed under the License is distributed on an
# "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
# KIND, either express or implied.  See the License for the
# specific language governing permissions and limitations
# under the License.
#
#-------------------------------------------------------------

/*
 * Zero-padding layer for 2D input.
 */

forward = function(matrix[double] img, int C, int Hin, int Win, int padh, int padw)
    return (matrix[double] img_padded) {
  /*
   * Computes the forward pass for a zero-padding layer.
   *
   * Inputs:
   *  - img: Input images, of shape (N, C*Hin*Win)
   *  - C: Number of input channels
   *  - Hin: Input height.
   *  - Win: Input width.
   *  - padh: Padding for top and bottom sides.
   *  - padw: Padding for left and right sides.
   *
   * Outputs:
   *  - img_padded: The input images padded along the height and width
   *      dimensions, of shape (N, C*(Hin+2*padh)*(Win+2*padw)).
   */
  N = nrow(img)
  img_padded = matrix(0, rows=N, cols=C*(Hin+2*padh)*(Win+2*padw))  # zeros
  HW = Hin*Win
  img_index = 1
  img_padded_index = 1
  for(c in 1:C) {
  	img_padded_index = img_padded_index + padh*(Win+2*padw)
    for(h in 1:Hin) {
      img_padded_index = img_padded_index + padw
  	  img_padded[,img_padded_index:(img_padded_index+Win-1)] = img[,img_index:(img_index+Win-1)] # vectorized over all images
  	  img_padded_index = img_padded_index + Win + padw
  	  img_index = img_index + Win
  	}
  	img_padded_index = img_padded_index + padh*(Win+2*padw)
  }
}

backward = function(matrix[double] dout, int C, int Hin, int Win, int padh, int padw)
    return (matrix[double] dX) {
  /*
   * Computes the backward pass for a zero-padding layer.
   *
   * Inputs:
   *  - dout: Gradient wrt `out` from upstream, of shape (N, C*(Hin+2*padh)*(Win+2*padw)).
   *  - C: Number of input channels
   *  - Hin: Input height.
   *  - Win: Input width.
   *  - padh: Padding for top and bottom sides.
   *  - padw: Padding for left and right sides.
   *
   * Outputs:
   *  - dX: Gradient wrt `X`, of shape (N, C*Hin*Win).
   */
  N = nrow(dout)
  dX = matrix(0, rows=N, cols=C*Hin*Win)  # zeros
  HW = Hin*Win
  img_index = 1
  img_padded_index = 1
  for(c in 1:C) {
  	img_padded_index = img_padded_index + padh*(Win+2*padw)
    for(h in 1:Hin) {
      img_padded_index = img_padded_index + padw
  	  dX[,img_index:(img_index+Win-1)] = dout[,img_padded_index:(img_padded_index+Win-1)] # vectorized over all images
  	  img_padded_index = img_padded_index + Win + padw
  	  img_index = img_index + Win
  	}
  	img_padded_index = img_padded_index + padh*(Win+2*padw)
  }
}

