# Remember to provide large enough heap size to discount the effect of garbage collections
# For example: java -Xmx30g -Xms30g -Xmn3048m -server -jar systemml-0.10.0-incubating-SNAPSHOT-standalone.jar -f test_conv2d.dml -explain -exec singlenode -stats -args 1000 1
 
max_iterations = $1
setup = $2
numFilters = -1
numChannels = -1
filterSize = -1
pad = -1
if(setup == 1) {
	numFilters = 20
	numChannels = 1
	filterSize = 5
	pad = 0
}
else if(setup == 2) {
	numFilters = 50
	numChannels = 20
	filterSize = 5
	pad = 0
}
else if(setup == 3) {
	numFilters = 20
	numChannels = 1
	filterSize = 3
	pad = 1
}
else if(setup == 4) {
	numFilters = 50
	numChannels = 20
	filterSize = 3
	pad = 1
}
else {
	stop('Incorrect setup (needs to be [1, 4]).')
}
imgSize = 28
n = 60000
X = rand(rows=n, cols=numChannels*imgSize*imgSize)
batch_size = 64
w = rand(rows=numFilters, cols=numChannels*filterSize*filterSize)
foo = 0
for(iter in 1:max_iterations) {
        beg = (iter * batch_size) %% n + 1
        end = min(n, beg + batch_size)
        X_batch = X[beg:end, ]
        n_batch = nrow(X_batch)
        convOut_1 = conv2d(X_batch, w, input_shape=[n_batch,numChannels,imgSize,imgSize], filter_shape=[numFilters,numChannels,filterSize,filterSize], padding=[pad,pad], stride=[1,1])
        foo = foo + min(0.1, sum(convOut_1))
}
print(foo)