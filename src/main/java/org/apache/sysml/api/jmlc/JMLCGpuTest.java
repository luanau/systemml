package org.apache.sysml.api.jmlc;
import org.apache.sysml.api.DMLScript;

import java.util.Random;

public class JMLCGpuTest {

    public static void main(String[] args) throws Exception {

        // obtain connection to SystemML
        Connection conn = new Connection();
        conn.setStatistics(true);
        DMLScript.FINEGRAINED_STATISTICS = true;
//        conn.setGpu(true);
//        conn.setForceGPU(true);
//        conn.setAvailableGpu("-1");

        String dml = conn.readScript("/Users/ahthomas@ibm.com/scratch/vgg_predict.dml");
        PreparedScript script = conn.prepareScript(dml, new String[] { "X", "b" }, new String[] { "predicted_y" }, false);

        // obtain the runtime plan generated by SystemML
        String plan = script.explain();
        System.out.println(plan);

        double[][] X = randomMatrix(1000, 100, 0, 1, 1.0);
        double[][] b = randomMatrix(100, 1, 0,1, 1.0);

        DMLScript.FORCE_ACCELERATOR = false;
        DMLScript.USE_ACCELERATOR = false;
        double[][] result = script.executeScript().getMatrix("predicted_y");
        DMLScript.FORCE_ACCELERATOR = true;
        DMLScript.USE_ACCELERATOR = true;

        String stats = script.statistics();
        System.out.println(stats);

        // close connection
        conn.close();
    }

    public static double[][] matrix(int rows, int cols, double[] vals) {
        double[][] matrix = new double[rows][cols];
        if ((vals == null) || (vals.length == 0)) {
            return matrix;
        }
        for (int i = 0; i < vals.length; i++) {
            matrix[i / cols][i % cols] = vals[i];
        }
        return matrix;
    }

    public static double[][] randomMatrix(int rows, int cols, double min, double max, double sparsity) {
        double[][] matrix = new double[rows][cols];
        Random random = new Random(System.currentTimeMillis());
        for (int i = 0; i < rows; i++) {
            for (int j = 0; j < cols; j++) {
                if (random.nextDouble() > sparsity) {
                    continue;
                }
                matrix[i][j] = (random.nextDouble() * (max - min) + min);
            }
        }
        return matrix;
    }

    public static void displayMatrix(double[][] matrix) {
        System.out.println("Matrix size:" + matrix.length + "x" + matrix[0].length);
        for (int i = 0; i < matrix.length; i++) {
            for (int j = 0; j < matrix[0].length; j++) {
                if (j > 0) {
                    System.out.print(", ");
                }
                System.out.print("[" + i + "," + j + "]:" + matrix[i][j]);
            }
            System.out.println();
        }
    }

}

